{"version":3,"sources":["Component/Buttons.js","Component/Input.js","Component/ClearButton.js","chatMessage.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","className","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","name","message","HOST","window","location","origin","replace","rws","WebSocket","App","addToInput","setState","state","addMessage","console","log","JSON","parse","elements","messages1","handleEqual","messageString","message1","math","data","stringify","send","componentDidMount","messages","onopen","onmessage","evt","forEach","element","onclose","this","action","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","map","index","key","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1d1d7af1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nconst isOperator = val => {\r\n    // Return True if it is a number\r\n    // and not an operator\r\n    return !isNaN(val) || val === \".\" || val === \"=\";\r\n}\r\n\r\nexport const Buttons = props => (\r\n    <div className={`button-wrapper ${\r\n        isOperator(props.children) ? null: \"operator\"\r\n    }`} onClick={() => props.handleClick(props.children)}>\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nexport const Input = (props) => (\r\n    <div className=\"input\">{props.input}</div>\r\n);","import React from 'react';\r\nimport './ClearButton.css';\r\n\r\nexport const ClearButton = (props) => (\r\n    <div className=\"clear-btn\" onClick={props.handleClear}>\r\n        {props.children}\r\n    </div>\r\n);","import React from 'react'\r\nimport './App.css';\r\n   \r\nexport default ({ name, message }) =>\r\n<div className=\"messages\">\r\n  <p>\r\n    <strong>{name}: </strong> <em>{message}</em>\r\n  </p>\r\n</div>","// In SRC directory\n\nimport React from 'react';\nimport './App.css';\n//import Chat from './Chat';\nimport {Buttons} from './Component/Buttons';\nimport {Input} from './Component/Input';\nimport {ClearButton} from './Component/ClearButton'\nimport ChatMessage from './chatMessage'\nimport * as math from 'mathjs';\nimport { element } from 'prop-types';\n// import PropTypes from 'prop-types'\n// import Button from 'react-bootstrap/Button';\n// import * as math from 'https://unpkg.com/mathjs@6.2.3/dist/math.js';\n\nvar HOST = window.location.origin.replace(/^https/, 'wss')\n// const Html5WebSocket = require('html5-websocket');\n// const ReconnectingWebSocket = require('reconnecting-websocket');\nlet isServerLocal = false;\n// var ws_host = 'https://calci-chat.herokuapp.com';\n// var ws_port = process.env.PORT || 5000;\n// console.log(ws_port)\n// if (isServerLocal) {\n//     ws_host = 'localhost';\n//     ws_port = '3000';\n// }\n// const HOST = 'ws://localhost:3030'\n\n// const options = { constructor: Html5WebSocket };\n// const rws = new ReconnectingWebSocket('ws://' + ws_host + ':' + ws_port + '/ws', undefined);\n\n// const rws = new WebSocket('wss://www.calci-chat.herokuapp.com' + ':' + ws_port + '/ws');\n\nvar rws = new WebSocket(HOST);\nvar el;\n// rws.timeout = 1000;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      name: \"\",\n      input: \"\",\n      messages1: [],\n      messages: [],\n      elements: [],\n    };\n  }\n\n  // ws = new WebSocket(HOST)\n\n  componentDidMount() {\n\n    rws.onopen = () => {\n        // on connecting, do nothing but log it to the console\n        console.log('connected')\n      }\n\n    rws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      console.log(JSON.parse(evt.data))\n      const val = JSON.parse(evt.data)\n      val.forEach(element => this.addMessage(element));\n      // this.addMessage(val)\n    }\n\n    rws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        rws: new WebSocket(HOST)\n        // rws: new WebSocket('wss://www.calci-chat.herokuapp.com' + ':' + ws_port + '/ws'),\n      })\n    }\n  }\n\n  // propTypes = {\n  //   onSubmitMessage: PropTypes.func.isRequired,\n  // }\n\n  addToInput = val => {\n    this.setState({input: this.state.input + val});\n  }\n\n  addMessage = val => {\n    console.log(\"efvhbvk: \", JSON.parse(val))\n    console.log(this.state.elements)\n    this.setState(\n      {messages1:  [val, ...this.state.messages1],\n      elements: [JSON.parse(val), ...this.state.elements]\n      // elements: this.state.elements.add(JSON.parse(val))\n      }\n      );\n  }\n\n  handleEqual = messageString => {\n    let message1 = this.state.input + ' = ' + math.evaluate(this.state.input)\n    const data = { name: this.state.name, message: message1 }\n    console.log(\"Handle Equal: \",JSON.stringify(data))\n    rws.send(JSON.stringify(data))\n    this.componentDidMount()\n    this.setState(\n      { input: message1,\n        messages:  [data, ...this.state.messages],\n        messages1:  [data, ...this.state.messages1],\n      }\n      );\n      \n  }\n\n  render() {\n    return (\n      <div className=\"split\">\n        <div className = \"right\">\n          <div className=\"calc-wrapper\">\n            <Input input={this.state.input}></Input>\n            <div className=\"row\">\n              <Buttons handleClick={this.addToInput}>7</Buttons>\n              <Buttons handleClick={this.addToInput}>8</Buttons>\n              <Buttons handleClick={this.addToInput}>9</Buttons>\n              <Buttons handleClick={this.addToInput}>/</Buttons>\n            </div>\n            <div className=\"row\">\n              <Buttons handleClick={this.addToInput}>4</Buttons>\n              <Buttons handleClick={this.addToInput}>5</Buttons>\n              <Buttons handleClick={this.addToInput}>6</Buttons>\n              <Buttons handleClick={this.addToInput}>*</Buttons>\n            </div>\n            <div className=\"row\">\n              <Buttons handleClick={this.addToInput}>1</Buttons>\n              <Buttons handleClick={this.addToInput}>2</Buttons>\n              <Buttons handleClick={this.addToInput}>3</Buttons>\n              <Buttons handleClick={this.addToInput}>+</Buttons>\n            </div>\n            <div className=\"row\">\n              <Buttons handleClick={this.addToInput}>.</Buttons>\n              <Buttons handleClick={this.addToInput}>0</Buttons>\n              <Buttons handleClick={() => this.handleEqual()}>=</Buttons>\n              <Buttons handleClick={this.addToInput}>-</Buttons>\n            </div>\n            <div className=\"row\">\n              <ClearButton handleClear={() => this.setState({input: \"\"})}>Clear</ClearButton>\n            </div>\n          </div>\n        </div>\n        \n        <div className = \"left\">\n          \n          <div>\n          <h1> Welcome {this.state.name}</h1>\n          <form action = \".\" \n                onSubmit={e => {\n                e.preventDefault()\n                this.setState({ name: '' })\n                }}>\n                <label htmlFor=\"name\">\n                  <input\n                    type=\"text\"\n                    id={'name'}\n                    placeholder={'Enter your name...'}\n                    value={this.state.name}\n                    onChange={e => this.setState({ name: e.target.value })\n                  }\n                  />\n                </label>\n          </form>\n          </div>\n            {console.log(\"Console Log: \", this.state.elements)}\n            {this.state.elements.map((message, index) => \n              <ChatMessage\n              key={index}\n              message = {message.message}\n              name = {message.name} />,\n            )}\n            {/* {this.state.elements.forEach(message =>\n            // console.log(message.name),\n            <ChatMessage\n              key = {0}\n              message={message.message}\n              name={message.name}\n            />,\n          )} */}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}